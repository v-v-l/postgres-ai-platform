version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Production: Enhanced security
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "${POSTGRES_HOST:-127.0.0.1}:${POSTGRES_PORT:-5432}:5432"
    volumes:
      - ${POSTGRES_DATA_PATH:-~/postgres-ai-data/postgres}:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      # Security configurations (mounted to correct locations)
      - ./postgres-config/server.crt:/var/lib/postgresql/server.crt
      - ./postgres-config/server.key:/var/lib/postgresql/server.key
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Production: Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: postgres-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${PROMETHEUS_DATA_PATH:-~/postgres-ai-data/prometheus}:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - postgres-network

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}?sslmode=disable"
    networks:
      - postgres-network
    depends_on:
      - postgres

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: postgres-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16687}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14251}:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: memory
    networks:
      - postgres-network

  grafana:
    image: grafana/grafana:latest
    container_name: postgres-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3005}:3000"
    volumes:
      - ${GRAFANA_DATA_PATH:-~/postgres-ai-data/grafana}:/var/lib/grafana
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
    networks:
      - postgres-network
    depends_on:
      - prometheus

# All data is now stored in configurable host directories
# No named volumes needed

networks:
  postgres-network:
    driver: bridge